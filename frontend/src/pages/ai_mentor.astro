---
import Layout from '../layouts/Layout.astro';
---

<Layout title="AI Mentor - AlgoArena">
    <div class="flex flex-col h-screen bg-gray-900 text-white p-4 pt-30">
        <!-- Guidance Type Modal -->
        <div id="guidanceModal" class=" fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center">
            <div class="bg-gray-800 p-6 rounded-lg max-w-md w-full">
                <h2 class="text-xl font-bold mb-4">Choose Guidance Type</h2>
                <button id="generalGuidance" class="w-full bg-green-600 hover:bg-green-700 mb-2 p-3 rounded-md transition flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
                    </svg>
                    General Career Guidance
                </button>
                <button id="detailedRoadmap" class="w-full bg-blue-600 hover:bg-blue-700 mb-2 p-3 rounded-md transition flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
                    </svg>
                    Detailed Roadmap
                </button>
                <button id="resumeReview" class="w-full bg-yellow-600 hover:bg-yellow-700 p-3 rounded-md transition flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Resume Review
                </button>
                <button id="cancelGuidance" class="w-full bg-gray-700 hover:bg-gray-600 mt-2 p-3 rounded-md transition flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    Cancel
                </button>
            </div>
        </div>

        <!-- Detailed Questions Modal -->
        <div id="detailedQuestionsModal" class="hidden fixed mt-10 inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center">
            <div class="bg-gray-800 p-6 rounded-lg max-w-md w-full">
                <h2 class="text-xl font-bold mb-4">Detailed Roadmap Questions</h2>
                <form id="detailedForm">
                    <div class="space-y-4">
                        <div>
                            <label class="block mb-2">Current Year of College</label>
                            <select class="w-full bg-gray-700 p-2 rounded-md" name="collegeYear" required>
                                <option value="">Select</option>
                                <option value="1st">1st Year</option>
                                <option value="2nd">2nd Year</option>
                                <option value="3rd">3rd Year</option>
                                <option value="4th">4th Year</option>
                            </select>
                        </div>
                        <div>
                            <label class="block mb-2">Major/Field of Study</label>
                            <input type="text" class="w-full bg-gray-700 p-2 rounded-md" name="major" required>
                        </div>
                        <div>
                            <label class="block mb-2">Completed Internships?</label>
                            <select class="w-full bg-gray-700 p-2 rounded-md" name="internships" required>
                                <option value="">Select</option>
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                            </select>
                        </div>
                        <div>
                            <label class="block mb-2">Proficient Programming Languages</label>
                            <input type="text" class="w-full bg-gray-700 p-2 rounded-md" name="languages" required>
                        </div>
                        <div>
                            <label class="block mb-2">Primary Area of Interest</label>
                            <input type="text" class="w-full bg-gray-700 p-2 rounded-md" name="interest" required>
                        </div>
                    </div>
                    <div class="mt-6 flex gap-2">
                        <button type="submit" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded-md transition w-full">Submit</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal to Upload PDF Resume -->
        <div id="uploadResumeModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center">
            <div class="bg-gray-800 p-6 rounded-lg max-w-md w-full">
                <h2 class="text-xl font-bold mb-4">Upload Resume for Review</h2>
                <input type="file" id="resumeInput" accept=".pdf" class="w-full bg-gray-700 p-2 rounded-md mb-4" />
                <button id="uploadResumeBtn" class="w-full bg-green-600 hover:bg-green-700 px-4 py-2 rounded-md transition relative">
                    <span class="upload-text">Upload</span>
                    <div class="loading hidden absolute inset-0 flex items-center justify-center">
                        <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    </div>
                </button>
                <p id="resumeError" class="text-red-400 text-sm mt-2 hidden"></p>
            </div>
        </div>

        <header class="pb-4 border-b border-gray-700 flex justify-between items-center">
            <h1 class="text-2xl font-bold">AI Mentor</h1>
            <button id="clearChat" class="bg-red-600 hover:bg-red-700 px-4 py-2 rounded-md transition">
                Clear Chat
            </button>
        </header>

        <div id="chatContainer" class="flex-grow overflow-y-auto py-4 space-y-4">
            <div class="text-gray-400 text-center p-4">
                Ask me anything about Career Guidance & Mentoring Questions!
            </div>
        </div>
        
        <div class="border-t border-gray-700 pt-4">
            <div class="flex flex-wrap gap-2 mb-4">
                <button class="common-question bg-gray-800 hover:bg-gray-700 text-sm px-3 py-2 rounded-md transition">How to prepare for technical interviews?</button>
                <button class="common-question bg-gray-800 hover:bg-gray-700 text-sm px-3 py-2 rounded-md transition">Should I learn DSA or focus on frameworks?</button>
                <button class="common-question bg-gray-800 hover:bg-gray-700 text-sm px-3 py-2 rounded-md transition">How to start contributing to open source?</button>
                <button class="common-question bg-gray-800 hover:bg-gray-700 text-sm px-3 py-2 rounded-md transition">Frontend vs Backend career path?</button>
                <button class="common-question bg-gray-800 hover:bg-gray-700 text-sm px-3 py-2 rounded-md transition">How to overcome imposter syndrome?</button>
                <button class="common-question bg-gray-800 hover:bg-gray-700 text-sm px-3 py-2 rounded-md transition">How to switch from one tech stack to another?</button>
                <button class="common-question bg-gray-800 hover:bg-gray-700 text-sm px-3 py-2 rounded-md transition">Best resources to learn system design?</button>
            </div>
            <form id="chatForm" class="flex gap-2">
                <input 
                    type="text" 
                    id="userInput" 
                    placeholder="Ask your question..." 
                    class="flex-grow bg-gray-800 text-white rounded-md px-4 py-3 focus:outline-none focus:ring-2 focus:ring-green-500"
                    autocomplete="off"
                />
                <button 
                    type="submit" 
                    class="bg-green-600 hover:bg-green-700 px-6 py-3 rounded-md transition"
                >
                    Send
                </button>
            </form>
        </div>
    </div>

    <script>
        let currentUserMessage = '';
        let chatHistory: {role: string, content: string}[] = [];
        
        // Modals
        function showGuidanceModal() {
            document.getElementById('guidanceModal')?.classList.remove('hidden');
        }
        
        function hideGuidanceModal() {
            document.getElementById('guidanceModal')?.classList.add('hidden');
        }
        
        function showDetailedModal() {
            document.getElementById('detailedQuestionsModal')?.classList.remove('hidden');
        }
        
        function hideDetailedModal() {
            document.getElementById('detailedQuestionsModal')?.classList.add('hidden');
        }

        function showUploadResumeModal() {
            document.getElementById('uploadResumeModal')?.classList.remove('hidden');
        }

        function hideUploadResumeModal() {
            document.getElementById('uploadResumeModal')?.classList.add('hidden');
        }

        // Event Listeners
        document.getElementById('generalGuidance')?.addEventListener('click', () => {
            hideGuidanceModal();
        });
        
        document.getElementById('detailedRoadmap')?.addEventListener('click', () => {
            hideGuidanceModal();
            showDetailedModal();
        });

        document.getElementById('resumeReview')?.addEventListener('click', () => {
            hideGuidanceModal();
            showUploadResumeModal();
        });
        
        document.getElementById('cancelGuidance')?.addEventListener('click', () => {
            hideGuidanceModal();
            currentUserMessage = '';
        });
        
        document.getElementById('detailedForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            const formData = new FormData(e.target as HTMLFormElement);
            const details = {
                collegeYear: formData.get('collegeYear'),
                major: formData.get('major'),
                internships: formData.get('internships'),
                languages: formData.get('languages'),
                interest: formData.get('interest')
            };
            
            const additionalInfo = `Additional Information:
- Current Year: ${details.collegeYear}
- Major: ${details.major}
- Internships: ${details.internships}
- Languages: ${details.languages}
- Interest: ${details.interest}`;
            
            const combinedQuery = `${currentUserMessage}\n\n${additionalInfo}`;
            hideDetailedModal();
            sendToAPI(combinedQuery);
        });

        // Common question handling
        document.querySelectorAll('.common-question').forEach(button => {
            button.addEventListener('click', () => {
            const questionText = button.textContent || '';
            addMessage(questionText, true);
            sendToAPI(questionText);
            });
        });

        // Chat functionality
        function addMessage(content: string, isUser: boolean) {
            const chatContainer = document.getElementById('chatContainer');
            const messageDiv = document.createElement('div');
            messageDiv.className = `p-3 rounded-lg max-w-3xl ${isUser ? 'bg-green-700 ml-auto' : 'bg-gray-800'}`;
            
            // Set innerHTML instead of textContent to properly render HTML
            messageDiv.innerHTML = content;
            
            chatContainer?.appendChild(messageDiv);
            chatContainer?.scrollTo(0, chatContainer.scrollHeight);
            
            chatHistory.push({ role: isUser ? 'user' : 'assistant', content: content });
        }

        async function sendToAPI(query: string) {
            const chatContainer = document.getElementById('chatContainer');
            
            try {
                const loadingDiv = document.createElement('div');
                loadingDiv.className = 'p-3 rounded-lg bg-gray-800 max-w-3xl';
                loadingDiv.innerHTML = '<div class="flex gap-2"><div class="animate-bounce">•</div><div class="animate-bounce delay-100">•</div><div class="animate-bounce delay-200">•</div></div>';
                chatContainer?.appendChild(loadingDiv);
                
                const response = await fetch('/api/ai_mentor', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ query: query })
                });
                
                if (!response.ok) throw new Error('API request failed');
                const data = await response.json();
                
                chatContainer?.removeChild(loadingDiv);
                addMessage(data.response, false);
                
            } catch (error) {
                console.error('Error:', error);
                const loadingDiv = chatContainer?.querySelector('.animate-bounce')?.parentElement?.parentElement;
                if (loadingDiv) chatContainer?.removeChild(loadingDiv);
                addMessage('Sorry, I encountered an error. Please try again.', false);
            }
        }

        // Form submission
        document.getElementById('chatForm')?.addEventListener('submit', (e) => {
            e.preventDefault();
            const input = document.getElementById('userInput') as HTMLInputElement;
            currentUserMessage = input.value.trim();
            if (!currentUserMessage) return;
            
            input.value = '';
            showGuidanceModal();
        });

        // Clear chat
        document.getElementById('clearChat')?.addEventListener('click', () => {
            const chatContainer = document.getElementById('chatContainer');
            if (chatContainer) {
                chatContainer.innerHTML = '<div class="text-gray-400 text-center p-4">Ask me anything about Career Guidance & Mentoring Questions!</div>';
                chatHistory = [];
            }
        });

        // PDF Upload Handler
        document.getElementById('uploadResumeBtn')?.addEventListener('click', async () => {
            const fileInput = document.getElementById('resumeInput') as HTMLInputElement;
            const errorElement = document.getElementById('resumeError');
            const uploadBtn = document.getElementById('uploadResumeBtn');
            const file = fileInput.files?.[0];

            // Reset error state
            errorElement?.classList.add('hidden');

            if (!file) {
                errorElement!.textContent = 'Please select a PDF file';
                errorElement?.classList.remove('hidden');
                return;
            }

            if (file.type !== 'application/pdf' && !file.name.toLowerCase().endsWith('.pdf')) {
                errorElement!.textContent = 'Only PDF files are allowed';
                errorElement?.classList.remove('hidden');
                return;
            }

            try {
                // Show loading state
                uploadBtn?.querySelector('.upload-text')?.classList.add('hidden');
                uploadBtn?.querySelector('.loading')?.classList.remove('hidden');
                uploadBtn?.setAttribute('disabled', 'true');

                const formData = new FormData();
                formData.append('resume', file);

                const response = await fetch('/api/ai_mentor', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to upload resume');
                }

                const data = await response.json();
                
                // Add AI response to chat
                addMessage(data.response, false);
                
                // Close modal and clear input
                hideUploadResumeModal();
                fileInput.value = '';

            } catch (error) {
                console.error('Upload error:', error);
                errorElement!.textContent = error instanceof Error ? error.message : 'Failed to process resume';
                errorElement?.classList.remove('hidden');
            } finally {
                // Reset loading state
                uploadBtn?.querySelector('.upload-text')?.classList.remove('hidden');
                uploadBtn?.querySelector('.loading')?.classList.add('hidden');
                uploadBtn?.removeAttribute('disabled');
            }
        });
    </script>
</Layout>