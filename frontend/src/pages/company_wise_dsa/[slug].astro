---
import Layout from '../../layouts/Layout.astro';

// Disable prerendering to enable SSR.
export const prerender = false;

const { slug } = Astro.params;
const baseUrl = import.meta.env.DEV
  ? "http://127.0.0.1:5000"
  : import.meta.env.PUBLIC_API_URL;
---
<Layout title="Company-wise DSA Questions">
  <div class="bg-neutral-900 text-gray-300 pt-15">
     <!-- Skeleton Screen Animation -->
     <section class="py-20" id="skeleton_animation">
      <div class="container mx-auto px-4">
        <!-- Skeleton for Company Info -->
        <div class="text-center mb-16">
          <div class="flex justify-center mb-4">
            <div class="w-24 h-24 bg-gray-700 rounded-full animate-pulse"></div>
          </div>
          <div class="h-8 bg-gray-700 rounded w-1/3 mx-auto mb-4 animate-pulse"></div>
          <div class="h-4 bg-gray-700 rounded w-1/2 mx-auto animate-pulse"></div>
        </div>

        <!-- Skeleton for Progress Bar -->
        <div class="mb-10 w-1/2 mx-auto">
          <div class="text-center mb-4">
            <div class="h-4 bg-gray-700 rounded w-1/4 mx-auto animate-pulse"></div>
          </div>
          <div class="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden animate-pulse">
            <div class="h-full rounded-full bg-gray-600" style="width: 0%"></div>
          </div>
        </div>

        <!-- Skeleton for Questions Table -->
        <div class="overflow-x-auto">
          <table class="w-full text-left text-sm text-gray-400 table-auto">
            <thead class="text-xs uppercase text-gray-300">
              <tr>
                <th class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></th>
                <th class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></th>
                <th class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></th>
                <th class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></th>
                <th class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></th>
              </tr>
            </thead>
            <tbody>
                <!-- Skeleton Rows -->
                {Array.from({ length: 10 }).map(() => (
                <tr class="border-b border-neutral-700">
                  <td class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></td>
                  <td class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></td>
                  <td class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></td>
                  <td class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></td>
                  <td class="px-4 py-2"><div class="h-4 bg-gray-700 rounded animate-pulse"></div></td>
                </tr>
                ))}
            </tbody>
          </table>
        </div>

        <!-- Skeleton for Pagination Controls -->
        <div class="mt-4 flex justify-center space-x-2">
          <div class="h-8 w-8 bg-gray-700 rounded-full animate-pulse"></div>
          <div class="h-8 w-8 bg-gray-700 rounded-full animate-pulse"></div>
          <div class="h-8 w-8 bg-gray-700 rounded-full animate-pulse"></div>
        </div>
      </div>
    </section>

    <section class="py-20 hidden" id="content">
      <div class="container mx-auto px-4">
        <!-- Pass the slug using dataset -->
        <div id="company-info" class="text-center mb-16" data-slug={slug} data-base-url={baseUrl}>
          <div class="flex justify-center mb-4">
            <img id="company-logo" src="" alt="Company Logo" class="w-24 h-24 object-contain hidden" />
          </div>
          <h2 id="company-title" class="text-4xl font-bold text-white mb-4 animate__animated animate__fadeIn">
            Loading...
          </h2>
          <p id="company_wise_subheading" class="text-lg text-gray-300 max-w-2xl mx-auto animate__animated animate__fadeIn">
            Fetching LeetCode questions...
          </p>
        </div>

        <!-- Progress Bar -->
        <div class="mb-10 w-1/2 mx-auto">
          <div class="text-center mb-4 text-gray-400">
            <div class="text-gray-400">
              Progress: <span id="progress-percentage">0%</span>
            </div>
          </div>
          <div class="w-full bg-gray-700 rounded-full h-2.5 overflow-hidden">
            <div id="progress-bar"
                 class="h-full rounded-full transition-all duration-500 ease-out
                        bg-gradient-to-r from-green-400 via-green-500 to-green-800"
                 style="width: 0%">
            </div>
          </div>
        </div>

        <!-- Questions Table -->
        <div class="overflow-x-auto">
          <table id="questions-table" class="w-full text-left text-sm text-gray-400 table-auto">
            <thead class="text-xs uppercase text-gray-300">
              <tr>
                <th class="px-4 py-2">No.</th>
                <th class="px-4 py-2">Question Title</th>
                <th class="px-4 py-2">Link</th>
                <th class="px-4 py-2">Difficulty</th>
                <th class="px-4 py-2">Solved</th>
              </tr>
            </thead>
            <tbody id="questions-body">
              <!-- Questions will be populated dynamically -->
               
            </tbody>
          </table>
        </div>

        <!-- Pagination Controls -->
        <div id="pagination" class="mt-4 flex justify-center space-x-2"></div>

        <!-- Login Prompt -->
        <div id="login-prompt" class="text-center mt-8 p-4 bg-gray-800 rounded-md hidden">
          <p class="text-gray-400" id="login_to_access">Log in to access all questions for free!</p>
          <a id="login_link" href="/login" class="mt-2 inline-block bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700">
            Log In
          </a>
        </div>
      </div>
    </section>
  </div>

  <script type="module">
    document.addEventListener("DOMContentLoaded", async () => {
      // Extract data from the DOM element's dataset
      const companyInfoDiv = document.getElementById("company-info");
      const baseUrl = companyInfoDiv.getAttribute("data-base-url");
      const slug = companyInfoDiv.getAttribute("data-slug");

      const companyTitle = document.getElementById("company-title");
      const companyLogo = document.getElementById("company-logo");
      const questionsBody = document.getElementById("questions-body");
      const loginPrompt = document.getElementById("login-prompt");
      const progressBar = document.getElementById("progress-bar");
      const progressPercentage = document.getElementById("progress-percentage");
      const login_to_access = document.getElementById("login_to_access");
      const company_wise_subheading = document.getElementById("company_wise_subheading");
      const login_link = document.getElementById("login_link");

      // Use localStorage to persist checkbox progress
      const storageKey = `progress-${slug}`;
      let progress = JSON.parse(localStorage.getItem(storageKey)) || [];

      async function fetchQuestions() {
        try {
          const response = await fetch(`${baseUrl}/api/company_wise_dsa/${slug}`, {
            credentials: "include",
          });
          if (!response.ok) throw new Error("Failed to fetch data");

          const data = await response.json();
          company_wise_subheading.textContent = `Here are the LeetCode questions for ${data.company}.`;
          login_link.href = `/login?redirect=${window.location.pathname}`;
          const isAuthenticated = data.is_authenticated || false;
          const questions = data.questions || [];

          // Initialize progress if not set
          if (!progress.length) {
            progress = Array(questions.length).fill(false);
            localStorage.setItem(storageKey, JSON.stringify(progress));
          }

          // Update company info
          companyTitle.textContent = `${data.company} Questions`;
          login_to_access.textContent = `Log in to access all ${data.total_questions} questions for free!`;
          if (data.company_logo) {
            companyLogo.src = data.company_logo;
            companyLogo.classList.remove("hidden");
          }

          // Show login prompt if the user is not authenticated
          if (!isAuthenticated) loginPrompt.classList.remove("hidden");

          // Populate questions table
          questionsBody.innerHTML = "";
          questions.forEach((q, index) => {
            const isRestricted = !isAuthenticated && index >= 5;
            const questionRow = document.createElement("tr");
            questionRow.className = `border-b border-neutral-700`;
            questionRow.innerHTML = `
              <td class="px-4 py-2">${index + 1}</td>
              <td class="px-4 py-2 ${isRestricted ? 'blur' : ''}">${isRestricted ? "Restricted" : q.title}</td>
              <td class="px-4 py-2 ${isRestricted ? 'blur' : ''}">
                <a href="${isRestricted ? "#" : q.leetcode_link}" target="_blank" class="text-green-600 hover:underline">
                  ${isRestricted ? "Restricted" : "Visit"}
                </a>
              </td>
              <td class="px-4 py-2 ${isRestricted ? 'blur' : ''}">
                <span class="px-2 py-1 rounded-full text-xs ${
                  q.difficulty.toLowerCase() === "easy" ? "bg-green-500/10 text-green-500" :
                  q.difficulty.toLowerCase() === "medium" ? "bg-yellow-500/10 text-yellow-500" :
                  q.difficulty.toLowerCase() === "hard" ? "bg-red-500/10 text-red-500" : "bg-gray-500/10 text-gray-500"
                }">${q.difficulty}</span>
              </td>
              <td class="px-4 py-2">
                <input type="checkbox" class="solved-checkbox" data-index="${index}" ${progress[index] ? "checked" : ""} />
              </td>
            `;
            questionsBody.appendChild(questionRow);
          });

          // Attach event listeners to checkboxes for updating progress
          document.querySelectorAll(".solved-checkbox").forEach((checkbox) => {
            checkbox.addEventListener("change", updateProgress);
          });
          updateProgress();

          // Initialize pagination after the table has been populated
          paginateTable('questions-table', 20);
          document.getElementById('content').classList.remove('hidden');
          document.getElementById('skeleton_animation').classList.add('hidden');
        } catch (error) {
          console.error("Error fetching questions:", error);
          companyTitle.textContent = "Failed to Load Questions";
        }
      }

      function updateProgress() {
        const solvedCheckboxes = document.querySelectorAll(".solved-checkbox");
        progress = Array.from(solvedCheckboxes).map((checkbox) => checkbox.checked);
        localStorage.setItem(storageKey, JSON.stringify(progress));

        const solvedCount = progress.filter(Boolean).length;
        const totalQuestions = solvedCheckboxes.length;
        const percentage = (solvedCount / totalQuestions) * 100;
        progressBar.style.width = `${percentage}%`;
        progressPercentage.textContent = `${percentage.toFixed(2)}%`;
      }

      // Pagination function (adapted from your design)
      function paginateTable(tableId, pageSize) {
        const table = document.getElementById(tableId);
        if (!table) return;
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const totalRows = rows.length;
        const totalPages = Math.ceil(totalRows / pageSize);
        const paginationContainer = document.getElementById('pagination');
        let currentPage = 1;
        
        function showPage(page) {
          currentPage = page;
          rows.forEach((row, index) => {
            row.style.display = (index >= (page - 1) * pageSize && index < page * pageSize) ? '' : 'none';
          });
        }
        
        function updatePaginationControls() {
          paginationContainer.innerHTML = '';
          
          function createButton(text, page, disabled = false, active = false) {
            const btn = document.createElement('button');
            btn.textContent = text;
            btn.className = `px-3 py-1 rounded ${active ? 'bg-green-600 text-white' : 'bg-neutral-700 text-white hover:bg-green-600'} ${disabled ? 'opacity-50 cursor-not-allowed' : ''}`;
            if (!disabled && text !== '...') {
              btn.addEventListener('click', () => {
                showPage(page);
                updatePaginationControls();
              });
            }
            return btn;
          }
          
          // Prev button
          const prevBtn = createButton('Prev', currentPage - 1, currentPage === 1);
          paginationContainer.appendChild(prevBtn);
          
          // Determine page numbers to display
          const maxVisible = 7;
          let pages = [];
          if (totalPages <= maxVisible) {
            for (let i = 1; i <= totalPages; i++) pages.push(i);
          } else {
            pages.push(1);
            let start = Math.max(2, currentPage - 2);
            let end = Math.min(totalPages - 1, currentPage + 2);
            if (start > 2) pages.push('...');
            for (let i = start; i <= end; i++) pages.push(i);
            if (end < totalPages - 1) pages.push('...');
            pages.push(totalPages);
          }
          
          pages.forEach(page => {
            if (page === '...') {
              const span = document.createElement('span');
              span.textContent = '...';
              span.className = 'px-3 py-1';
              paginationContainer.appendChild(span);
            } else {
              const btn = createButton(page, page, false, page === currentPage);
              paginationContainer.appendChild(btn);
            }
          });
          
          // Next button
          const nextBtn = createButton('Next', currentPage + 1, currentPage === totalPages);
          paginationContainer.appendChild(nextBtn);
        }
        
        // Initialize pagination
        showPage(1);
        updatePaginationControls();
      }

      // Fetch questions on page load
      fetchQuestions();
    });
  </script>
</Layout>
