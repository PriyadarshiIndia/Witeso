---
import Layout from "../../layouts/Layout.astro";
---

<Layout
    title="CSS Learning Game - Level 1"
    meta_description="Play and learn CSS with our interactive game designed for beginners. Test your skills and improve your knowledge of CSS in a fun way."
    meta_keywords="Animation Arena, CSS game, learn CSS, interactive CSS game, CSS for beginners, play and learn CSS"
>

    <style>
        /* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f0f4f8;
            color: #333;
            min-height: 100vh;
        }

        /* Main layout */
        .game-container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .main-content {
            display: flex;
            flex: 1;
            flex-direction: column;
            padding: 1rem;
            padding-top: 100px;
        }

        /* Game sections */
        .game-sections {
            display: flex;
            flex: 1;
            gap: 1.5rem;
            flex-direction: column;
        }

        @media (min-width: 768px) {
            .game-sections {
                flex-direction: row;
            }
        }

        /* Code editor side */
        .editor-section {
            flex: 1;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
        }

        .editor-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .editor-header h2 {
            font-size: 1.5rem;
            color: #22c55e;
        }

        .level-indicator {
            background-color: #dcfce7;
            color: #166534;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: bold;
        }

        .editor-container {
            background-color: #f8fafc;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
            padding: 1rem;
            margin-bottom: 1rem;
            flex: 1;
        }

        .editor-instructions {
            background-color: #ecfdf5;
            border-left: 4px solid #22c55e;
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 0 8px 8px 0;
        }

        .editor-instructions h3 {
            color: #166534;
            margin-bottom: 0.5rem;
        }

        .editor-instructions p {
            color: #14532d;
            font-size: 0.9rem;
            line-height: 1.5;
        }

        #cssInput {
            width: 100%;
            height: 150px;
            padding: 1rem;
            border: none;
            background-color: #1e293b;
            color: #e2e8f0;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 0.9rem;
            resize: none;
            margin-bottom: 1rem;
            line-height: 1.5;
        }

        #cssInput::placeholder {
            color: #64748b;
        }

        .editor-buttons {
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-primary {
            background-color: #22c55e;
            color: white;
            box-shadow: 0 4px 6px rgba(34, 197, 94, 0.2);
        }

        .btn-primary:hover {
            background-color: #16a34a;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(34, 197, 94, 0.3);
        }

        .btn-secondary {
            background-color: #e2e8f0;
            color: #475569;
        }

        .btn-secondary:hover {
            background-color: #cbd5e1;
        }

        /* Game preview side */
        .preview-section {
            flex: 1;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
        }

        .preview-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .preview-header h2 {
            font-size: 1.5rem;
            color: #22c55e;
        }

        .timer {
            background-color: #dcfce7;
            color: #166534;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: bold;
        }

        #gameArea {
            flex: 1;
            background: linear-gradient(to bottom, #ecfdf5, #dcfce7);
            border-radius: 8px;
            position: relative;
            overflow: hidden;
            min-height: 300px;
            border: 1px solid #bbf7d0;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Animation target element */
        #animationTarget {
            width: 100px;
            height: 100px;
            background-color: #22c55e;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            position: relative;
        }

        /* Target animation preview */
        #targetAnimation {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 100px;
            height: 100px;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 5px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            z-index: 10;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        #targetAnimation .demo-box {
            width: 50px;
            height: 50px;
            background-color: #22c55e;
            border-radius: 4px;
        }

        /* Message styles */
        #message {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 0.75rem 1.5rem;
            border-radius: 30px;
            font-weight: bold;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 100;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .message-success {
            background-color: #dcfce7;
            color: #166534;
        }

        .message-error {
            background-color: #fee2e2;
            color: #b91c1c;
        }

        .message-visible {
            opacity: 1 !important;
        }

        /* Hints panel */
        .hints-panel {
            background-color: #f8fafc;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
        }

        .hints-panel h3 {
            color: #22c55e;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .hints-panel h3 svg {
            width: 20px;
            height: 20px;
        }

        .hints-panel ul {
            list-style-type: none;
            padding-left: 1.5rem;
        }

        .hints-panel li {
            margin-bottom: 0.5rem;
            font-family: 'Courier New', monospace;
            color: #475569;
            font-size: 0.9rem;
        }

        .hints-panel li::before {
            content: "→";
            margin-right: 0.5rem;
            color: #22c55e;
        }

        /* Confetti animation */
        .confetti {
            position: absolute;
            width: 10px;
            height: 10px;
            opacity: 1;
            animation: fall 3s ease-out forwards;
            z-index: 20;
        }

        @keyframes fall {
            0% {
                transform: translateY(-50px) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(400px) rotate(360deg);
                opacity: 0;
            }
        }

        /* Progress bar */
        .progress-container {
            width: 100%;
            height: 8px;
            background-color: #e2e8f0;
            border-radius: 4px;
            margin-top: 1rem;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #22c55e, #16a34a);
            width: 0%;
            transition: width 0.5s ease;
            border-radius: 4px;
        }

        /* Animation keyframes for target previews */
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-20px); }
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.2); }
        }

        @keyframes slide {
            0% { transform: translateX(-20px); }
            50% { transform: translateX(20px); }
            100% { transform: translateX(-20px); }
        }
    </style>
        <main class="main-content pt-30">
            <div class="game-sections">
                <!-- Code Editor Side -->
                <section class="editor-section">
                    <div class="editor-header">
                        <h2>Animation Arena</h2>
                        <div class="level-indicator">Level 1</div>
                        <div class="navigation-buttons">
                            <a id="prevLevelButton" class="disabled btn btn-secondary opacity-20">← Previous</a>
                            <a href="/css_learning_game/level_2" id="nextLevelButton" class="btn btn-primary">Next →</a>
                        </div>
                    </div>

                    <div class="editor-instructions">
                        <h3>Mission</h3>
                        <p>Make the blue box spin continuously. Use CSS animation properties.</p>
                    </div>

                    <div class="editor-container">
                        <textarea id="cssInput" placeholder="/* Write your CSS here */
/* Example:
   animation: spin 2s linear infinite;
*/
@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}"></textarea>
                        
                        <div class="editor-buttons">
                            <button id="applyButton" class="btn btn-primary">Apply CSS</button>
                            <button id="resetButton" class="btn btn-secondary">Reset</button>
                        </div>
                    </div>

                    <div class="hints-panel">
                        <h3>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <circle cx="12" cy="12" r="10"></circle>
                                <line x1="12" y1="16" x2="12" y2="12"></line>
                                <line x1="12" y1="8" x2="12.01" y2="8"></line>
                            </svg>
                            Helpful Animation Properties
                        </h3>
                        <ul>
                            <li>animation: name duration timing-function delay iteration-count;</li>
                            <li>animation-name: spin;</li>
                            <li>animation-duration: 2s;</li>
                            <li>animation-timing-function: linear;</li>
                            <li>animation-iteration-count: infinite;</li>
                            <li>@keyframes rules for defining animations</li>
                        </ul>
                    </div>

                    <div class="progress-container">
                        <div id="progressBar" class="progress-bar" style="width: 0%"></div>
                    </div>
                </section>

                <!-- Game Preview Side -->
                <section class="preview-section">
                    <div class="preview-header">
                        <h2>Game Preview</h2>
                        <div id="timerDisplay" class="timer">01:00</div>
                    </div>

                    <div id="gameArea">
                        <!-- Target animation preview -->
                        <div id="targetAnimation">
                            <div class="demo-box" style="animation: spin 2s linear infinite;"></div>
                        </div>
                        
                        <!-- Animation target element -->
                        <div id="animationTarget"></div>
                    </div>
                </section>
            </div>
        </main>

        <div id="message">Message goes here</div>
    </div>

    <script>
        // Game variables
        let timeLeft = 120;
        let timerInterval;
        let currentLevel = 1;
        let progress = 0;
        
        // DOM Elements
        const cssInput = document.getElementById('cssInput');
        const animationTarget = document.getElementById('animationTarget');
        const message = document.getElementById('message');
        const timerDisplay = document.getElementById('timerDisplay');
        const progressBar = document.getElementById('progressBar');
        const applyButton = document.getElementById('applyButton');
        const resetButton = document.getElementById('resetButton');
        const gameArea = document.getElementById('gameArea');
        
        // Level configurations
        const levels = [
            {
                instructions: "Make the blue box spin continuously.",
                targetCSS: {
                    animationName: "spin",
                    animationDuration: "2s",
                    animationTimingFunction: "linear",
                    animationIterationCount: "infinite"
                },
                targetAnimation: "spin 2s linear infinite"
            },
            {
                instructions: "Make the box bounce up and down.",
                targetCSS: {
                    animationName: "bounce",
                    animationDuration: "1s",
                    animationTimingFunction: "ease-in-out",
                    animationIterationCount: "infinite"
                },
                targetAnimation: "bounce 1s ease-in-out infinite"
            },
            {
                instructions: "Make the box pulse (grow and shrink).",
                targetCSS: {
                    animationName: "pulse",
                    animationDuration: "1.5s",
                    animationTimingFunction: "ease",
                    animationIterationCount: "infinite"
                },
                targetAnimation: "pulse 1.5s ease infinite"
            },
            {
                instructions: "Make the box slide side to side with a delay.",
                targetCSS: {
                    animationName: "slide",
                    animationDuration: "3s",
                    animationTimingFunction: "ease-in-out",
                    animationIterationCount: "infinite",
                    animationDelay: "0.5s"
                },
                targetAnimation: "slide 3s ease-in-out infinite 0.5s"
            }
        ];
        
        // Initialize the game
        function initGame() {
            resetTimer();
            resetAnimationTarget();
            updateProgressBar(0);
            loadLevel(currentLevel);
            
            // Event listeners
            applyButton.addEventListener('click', applyCSS);
            resetButton.addEventListener('click', resetAnimationTarget);
        }
        
        // Load level
        function loadLevel(levelNum) {
            const level = levels[levelNum - 1];
            document.querySelector('.editor-instructions p').textContent = level.instructions;
            document.querySelector('.level-indicator').textContent = `Level ${levelNum}`;
            
            // Update target animation preview
            const targetBox = document.querySelector('#targetAnimation .demo-box');
            targetBox.style.animation = level.targetAnimation;
        }
        
        // Apply CSS from the input
        function applyCSS() {
            const css = cssInput.value;
            
            try {
                // Apply the CSS to the animation target
                animationTarget.style = css;
                hideMessage();
                
                // Check if the animation matches the target
                checkAnimation();
                
            } catch (error) {
                showMessage('❌ Invalid CSS Property', 'error');
            }
        }
        
        // Check if the animation matches the target
        function checkAnimation() {
            const level = levels[currentLevel - 1];
            const targetCSS = level.targetCSS;
            
            // Get computed style of the animation target
            const computedStyle = window.getComputedStyle(animationTarget);
            
            // Check if the key properties match
            let isCorrect = true;
            
            // Check each animation property
            for (const property in targetCSS) {
                if (computedStyle[property] !== targetCSS[property]) {
                    isCorrect = false;
                    break;
                }
            }
            
            if (isCorrect) {
                levelComplete();
            }
        }
        
        // Level complete
        function levelComplete() {
            clearInterval(timerInterval);
            showMessage('🎉 Success! Level Complete!', 'success');
            createConfetti();
            
            // Update progress
            progress += 25; // Four levels, so 25% per level
            updateProgressBar(progress);
            
            // Prepare for next level
            setTimeout(() => {
                if (currentLevel < levels.length) {
                    currentLevel++;
                    loadLevel(currentLevel);
                    resetAnimationTarget();
                    resetTimer();
                } else {
                    // Game complete
                    showMessage('🏆 Congratulations! You completed all levels!', 'success');
                    updateProgressBar(100);
                }
            }, 3000);
        }
        
        // Reset the animation target
        function resetAnimationTarget() {
            animationTarget.style = '';
            cssInput.value = '';
            hideMessage();
        }
        
        // Timer functions
        function resetTimer() {
            clearInterval(timerInterval);
            timeLeft = 120;
            updateTimerDisplay();
            
            timerInterval = setInterval(() => {
                timeLeft--;
                updateTimerDisplay();
                
                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    showMessage('⏰ Time\'s up! Try again.', 'error');
                }
            }, 1000);
        }
        
        function updateTimerDisplay() {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }
        
        // Show message
        function showMessage(text, type) {
            message.textContent = text;
            message.className = type === 'success' ? 'message-success' : 'message-error';
            message.classList.add('message-visible');
            
            setTimeout(() => {
                hideMessage();
            }, 3000);
        }
        
        // Hide message
        function hideMessage() {
            message.classList.remove('message-visible');
        }
        
        // Update progress bar
        function updateProgressBar(value) {
            progressBar.style.width = `${value}%`;
        }
        
        // Create confetti effect
        function createConfetti() {
            const colors = ['#3b82f6', '#1d4ed8', '#60a5fa', '#93c5fd', '#bfdbfe'];
            
            // Remove any existing confetti
            document.querySelectorAll('.confetti').forEach(el => el.remove());
            
            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti';
                confetti.style.left = `${Math.random() * 100}%`;
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.width = `${Math.random() * 10 + 5}px`;
                confetti.style.height = `${Math.random() * 10 + 5}px`;
                confetti.style.animationDuration = `${Math.random() * 2 + 2}s`;
                confetti.style.animationDelay = `${Math.random() * 0.5}s`;
                gameArea.appendChild(confetti);
                
                // Remove confetti after animation
                setTimeout(() => {
                    if (confetti.parentNode) {
                        confetti.parentNode.removeChild(confetti);
                    }
                }, 3000);
            }
        }
        
        // Initialize the game when the page loads
        window.addEventListener('load', initGame);
    </script>
</Layout>